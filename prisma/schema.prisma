// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            Role?             @default(customer)
  contactNo       String
  address         String
  profileImg      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ReviewAndRating ReviewAndRating[]
  Order           Order[]

  @@map("user")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book[]

  @@map("category")
}

model Book {
  id              String   @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  categoryId      String

  category        Category          @relation(fields: [categoryId], references: [id])
  ReviewAndRating ReviewAndRating[]
  OrderedBook     OrderedBook[]

  @@map("book")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  bookId    String

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("review_and_rating")
}

model Order {
  id           String   @id @default(uuid())
  status       Status   @default(pending)
  orderedBooks Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  userId String

  orderedbooks OrderedBook[]

  @@map("order")
}

model OrderedBook {
  id       String @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int

  order Order @relation(fields: [orderId], references: [id])
  book  Book  @relation(fields: [bookId], references: [id])

  @@map("ordered_book")
}

enum Role {
  admin
  customer
}

enum Status {
  pending
  shipped
  delivered
}
